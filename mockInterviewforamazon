We'd like to paint each house either red, green, or blue.
The amount of money it costs to paint a specific house a specific color varies (maybe the owner already has some old paint that he can use, or parts of his house are already painted that color).
A house cannot be painted the same color as one of its neighbors
The goal is to paint all of the houses for the minimum total cost.

cost[i][j] - paint the ith house with color j, j = 0 red j = 1 green j = 2 blue
length of cost number of houses; A B C D 
// dp[i][0] dp[i][1] dp[i][2]
// dp[i+1][1] = cost[i+1][1] + Math.min(dp[i][0], dp[i][2]);
// dp[i][2]
// dp[i][c] donotes minumum cost whihc is the ith houses colored with color c
// A B C
// A : 1 2 3
// B : 2 3 5
// C : 1 1 1
// we just have houes A   1 2 3
// dp[0][0] = 1 dp[0][1] = 2 dp[0][2] = 3
// dp[1][0] = 2 + Math.min(2, 3) = 4;
// dp[1][1] = 3 + Math.min(1, 3) = 4;
// dp[1][2] = 5 + Math.min(1, 2) = 6;
// House C
// dp[2][0] = 1 + Math.min(4, 6) = 5;
// M colors, 
public int paintHouses(int[][] costs) {
// instead of three colors, we use n colors
   if (costs == null || costs.length == 0) return 0;
   // dp[i][c] donotes minumum cost which is the ith houses colored with color c
   int[][] dp = new int[costs.length][3];
   // base case
   dp[0][0] = costs[0][0]; 
   dp[0][1] = costs[0][1]; 
   dp[0][2] = costs[0][2];
   for (int i = 0; i < costs.length - 1; i++) {
     dp[i+1][0] = cost[i+1][0] + Math.min(dp[i][1], dp[i][2]);
     dp[i+1][1] = cost[i+1][1] + Math.min(dp[i][0], dp[i][2]);
     dp[i+1][2] = cost[i+1][2] + Math.min(dp[i][0], dp[i][1]);
   }
   // compare three values ending in three colors, return the small cost
   int min1 = Math.min(dp[costs.length - 1][0], dp[costs.length - 1][1]);
   int min2 = Math.min(min1, dp[costs.length - 1][2]);
   return min2;
} 
public int paintHouses(int[][] costs) {
   if (costs == null || costs.length == 0 || costs[0].length == 0) return 0;
   // M denote the # of houses
   // N denote the # of colors
   int M = costs.length; int N = costs[0].length;
   // dp[i][c] donotes minumum cost which is the ith houses colored with color c
   int[][] dp = new int[M][N];
   for (int i = 0; i < N; i++) {
     dp[0][i] = costs[0][i];
   }
   for (int i = 1; i < M; i++) { 
     for (int j = 0; j < N; j++) {
       dp[i][j] = Integer.MAX_VALUE;
       for (int k = 0; k < N; k++) {
         if (k == j) continue;
         dp[i][j] = Math.min(dp[i][j], dp[i-1][k] + costs[i][j]);
       }
     }
   }
   // compare every value in dp[M-1][j]
   int min = Integer.MAX_VALUE;
   for (int val : dp[M-1]) {
      min = Math.min(min, val);
   }
   return min;
} 








// Initialize all the values to Integer.MAX_VALUE
   //for (int[] d : dp) Arrays.fill(d, Integer.MAX_VALUE);
   // base case

//////////////////
Intro:
seeking entry level position -> 没必要说，因为都知道。只要说自己哪个学校，有哪些经历就行了。
what is this about -> 没必要 

say some thoughts -> write code =》中间加一点written description

I will use hashmap for every point to check how many points for a specific slope

smooth => 节奏


Question: Given a list of N points in 2D space, determine the maximum number of co-linear points.
                  .3
        .0      .4
        .1    .2
        
       Communication overhead
       Map<Slope, # of points> to record #s per line
       yline corner case 
        
       // point 0 : yline = 1  xline = 1
       // slope -1 1  
                1.2 1
         // 1
         // point 1 xline = 1, 
         slope 1.5 1
               1.8  1
               max = 1; 1/0
                
                // slope 1.7 2
                // slope 1.7 1      
       public int maximumColinear(int[][] points) {
         int max = 0;
         // iterate each point
         for (int i = 0; i < points.length; i++) {
           // for the current point, get the max # of lines going through the point
           for (int j = i+1; j < points.length; j++) {
             int  yline = 0;
             // Use the hashmap to record slope and # of lines
             HashMap<Float, Integer> slope = new HashMap<>();
             // check the edge case which is a horizontal line
             if (points[i][0] == points[j][0]) yline++;
             else {
                float s = (points[j][1] - points[i][1])/(float)(points[j][0] - points[i][0]);
                // if already exist update, if not create
                slope.put(s, slope.getOrDefault(s, 0) + 1);
                
             }
           }
           // check the line against the current max
           int currMax = 0;
           // Can you avoid surplus computation.
           for (int k : slope.values()) {
             currMax = Math.max(k, currMax);
           }
           currMax = Math.max(currMax, Math.max(xline, yline));
           max = Math.max(max, currMax);
         }
         return max + 1;
       }
